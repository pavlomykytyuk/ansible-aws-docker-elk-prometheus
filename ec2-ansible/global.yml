---
- name: Create PoC
  hosts: localhost
  gather_facts: True

  vars:
      region: us-west-2
      instance_type: t2.micro
      ami: ami-061392db613a6357b #aws
#      ami: ami-01ed306a12b7d1c96 #centos
      keypair: pavlo.mykytyuk

  tasks:
###host1-master
    - name: Create a Master instance
      ec2:
         key_name: "{{ keypair }}"
         group: SecGroup for public network
         instance_type: "{{ instance_type}}"
         image: "{{ ami }}"
         wait: true
         region: "{{ region }}"
         count: 1
         instance_tags:
            Name: host1
         vpc_subnet_id: subnet-0cf73cb75c190fb50
         assign_public_ip: yes
      register: ec2

    - name: Wait for SSH to come up
      wait_for: host={{ item.public_ip }} port=22 delay=10 timeout=120
      with_items: "{{ ec2.instances }}"

    - name: Add host to groupname4
      add_host: hostname={{ item.public_ip }} groupname=masters
      with_items: "{{ ec2.instances }}"

    - name: add host to multiple groups1
      add_host:
        hostname: "{{ item.public_ip }}"        
        groups:
          - masters
          - host1
      with_items: "{{ ec2.instances }}"
    
    - name: add host to multiple groups2
      add_host:
        hostname: "{{ item.private_dns_name }}"    
        groups:
          -  hostname1
      with_items: "{{ ec2.instances }}"

    - name: Add host to groupname3
      add_host: hostname={{ item.private_ip }} groupname=mastersprivate
      with_items: "{{ ec2.instances }}"

##host2-worker
    - name: Create a Worker instance
      ec2:
         key_name: "{{ keypair }}"
         group: SecGroup for public network
         instance_type: "{{ instance_type}}"
         image: "{{ ami }}"
         wait: true
         region: "{{ region }}"
         count: 1
         instance_tags:
            Name: host2
         vpc_subnet_id: subnet-0cf73cb75c190fb50
         assign_public_ip: yes
      register: ec2

    - name: Wait for SSH to come up
      wait_for: host={{ item.public_ip }} port=22 delay=10 timeout=120
      with_items: "{{ ec2.instances }}"

    - name: add host to multiple groups
      add_host:
        hostname: "{{ item.public_ip }}"
        groups:
          - workers
          - host2
      with_items: "{{ ec2.instances }}"


    - name: add host to multiple groups
      add_host:
        hostname: "{{ item.private_dns_name }}"
        groups:
          -  hostname2
      with_items: "{{ ec2.instances }}"

##host3-worker
    - name: Create a Worker instance
      ec2:
         key_name: "{{ keypair }}"
         group: SecGroup for public network
         instance_type: "{{ instance_type}}"
         image: "{{ ami }}"
         wait: true
         region: "{{ region }}"
         count: 1
         instance_tags:
            Name: host3
         vpc_subnet_id: subnet-0cf73cb75c190fb50
         assign_public_ip: yes
      register: ec2

    - name: Wait for SSH to come up
      wait_for: host={{ item.public_ip }} port=22 delay=10 timeout=120
      with_items: "{{ ec2.instances }}"

    - name: add host to multiple groups
      add_host:
        hostname: "{{ item.public_ip }}"
        groups:
          - workers
          - host3
      with_items: "{{ ec2.instances }}"

    - name: add host to multiple groups
      add_host:
        hostname: "{{ item.private_dns_name }}"
        groups:
          -  hostname3
      with_items: "{{ ec2.instances }}"


##host4-worker
    - name: Create a Worker instance
      ec2:
         key_name: "{{ keypair }}"
         group: SecGroup for public network
         instance_type: "{{ instance_type}}"
         image: "{{ ami }}"
         wait: true
         region: "{{ region }}"
         count: 1
         instance_tags:
            Name: host4
         vpc_subnet_id: subnet-0cf73cb75c190fb50
         assign_public_ip: yes
      register: ec2

    - name: Wait for SSH to come up
      wait_for: host={{ item.public_ip }} port=22 delay=10 timeout=120
      with_items: "{{ ec2.instances }}"

    - name: add host to multiple groups
      add_host:
        hostname: "{{ item.public_ip }}"
        groups:
          - workers
          - host4
      with_items: "{{ ec2.instances }}"

    - name: add host to multiple groups
      add_host:
        hostname: "{{ item.private_dns_name }}"
        groups:
          -  hostname4
      with_items: "{{ ec2.instances }}"


##host5-worker
    - name: Create a Worker instance
      ec2:
         key_name: "{{ keypair }}"
         group: SecGroup for public network
         instance_type: "{{ instance_type}}"
         image: "{{ ami }}"
         wait: true
         region: "{{ region }}"
         count: 1
         instance_tags:
            Name: host5
         vpc_subnet_id: subnet-0cf73cb75c190fb50
         assign_public_ip: yes
      register: ec2

    - name: Wait for SSH to come up
      wait_for: host={{ item.public_ip }} port=22 delay=10 timeout=120
      with_items: "{{ ec2.instances }}"

    - name: add host to multiple groups
      add_host:
        hostname: "{{ item.public_ip }}"
        groups:
          - workers
          - host5
      with_items: "{{ ec2.instances }}"

    - name: add host to multiple groups
      add_host:
        hostname: "{{ item.private_dns_name }}"
        groups: 
          -  hostname5
      with_items: "{{ ec2.instances }}"
           

- name: Manage instance Master 
  hosts: masters
  remote_user: ec2-user
  connection: ssh
  sudo: True
  roles:
    - preconf
    - selinux
    - docker

- name: Manage instance Worker
  hosts: workers
  remote_user: ec2-user
  connection: ssh
  sudo: True
  roles:
    - preconf
    - selinux
    - docker

- name: Init Swarm Master
  hosts: masters
  gather_facts: True
  remote_user: ec2-user
  sudo: True
  tasks:
    - name: Swarm Init
      command: docker swarm init --advertise-addr  {{ hostvars[groups['mastersprivate'][0]]['inventory_hostname'] }}

    - name: Get Worker Token
      command: docker swarm join-token worker -q
      register: worker_token

    - name: Show Worker Token
      debug: var=worker_token.stdout

    - name: Master Token
      command: docker swarm join-token manager -q
      register: master_token

    - name: Show Master Token
      debug: var=master_token.stdout

- name: Join Swarm Cluster
  hosts: workers
  remote_user: ec2-user
  sudo: True
#  gather_facts: 
  vars:
    token: "{{ hostvars[groups['masters'][0]]['worker_token']['stdout'] }}"
    master: "{{ hostvars[groups['mastersprivate'][0]]['inventory_hostname'] }}"
 
  tasks:
    - name: Join Swarm Cluster as a Worker
      command: docker swarm join --token {{ token }} {{ master }}:2377
      register: worker

    - name: Show Results
      debug: var=worker.stdout

    - name: Show Errors
      debug: var=worker.stderr

- name: Update swarm cluster
  hosts: masters
  gather_facts: True
  remote_user: ec2-user
  sudo: True
  vars:
    myhost1: "{{ hostvars[groups['hostname1'][0]]['inventory_hostname'] }}"
    myhost2: "{{ hostvars[groups['hostname2'][0]]['inventory_hostname'] }}"
    myhost3: "{{ hostvars[groups['hostname3'][0]]['inventory_hostname'] }}"
    myhost4: "{{ hostvars[groups['hostname4'][0]]['inventory_hostname'] }}"
    myhost5: "{{ hostvars[groups['hostname5'][0]]['inventory_hostname'] }}"

  tasks:
    - name: nodeupdate1
      command: docker node update --label-add host1=true {{ myhost1 }}

    - name: nodeupdate2
      command: docker node update --label-add host2=true {{ myhost2 }}

    - name: nodeupdate3
      command: docker node update --label-add host3=true {{ myhost3 }}

    - name: nodeupdate4
      command: docker node update --label-add host4=true {{ myhost4 }}

    - name: nodeupdate5
      command: docker node update --label-add host5=true {{ myhost5 }}

- name: Deploy App
  hosts: masters
  remote_user: ec2-user
  connection: ssh
  sudo: True
  vars:
    myhost1: "{{ hostvars[groups['hostname1'][0]]['inventory_hostname'] }}"
    myhost2: "{{ hostvars[groups['hostname2'][0]]['inventory_hostname'] }}"
    myhost3: "{{ hostvars[groups['hostname3'][0]]['inventory_hostname'] }}"
    myhost4: "{{ hostvars[groups['hostname4'][0]]['inventory_hostname'] }}"
    myhost5: "{{ hostvars[groups['hostname5'][0]]['inventory_hostname'] }}"
    mypublichost: "{{ hostvars[groups['masters'][0]]['inventory_hostname'] }}"

  roles:
#    - edit-cluster
    - deploy-app-docker

